import { randomBytes, createCipheriv, createDecipheriv, randomUUID } from 'node:crypto';

const defaultEncryptAlgorithm = "aes-256-cbc";
const importEncryptSecret = (secret, _encryptAlgorithm) => {
  return Promise.resolve(
    Buffer.from(secret ?? randomBytes(22).toString("base64"))
  );
};
const create = (secret, encryptSecret, encryptAlgorithm) => {
  const iv = randomBytes(16);
  const cipher = createCipheriv(
    encryptAlgorithm || defaultEncryptAlgorithm,
    Buffer.from(encryptSecret),
    iv
  );
  const encrypted = cipher.update(secret, "utf8", "base64") + cipher.final("base64");
  return Promise.resolve(`${iv.toString("base64")}:${encrypted}`);
};
const verify = (secret, token, encryptSecret, encryptAlgorithm) => {
  const [iv, encrypted] = token.split(":");
  if (!iv || !encrypted) {
    return Promise.resolve(false);
  }
  let decrypted;
  try {
    const decipher = createDecipheriv(
      encryptAlgorithm || defaultEncryptAlgorithm,
      Buffer.from(encryptSecret),
      Buffer.from(iv, "base64")
    );
    decrypted = decipher.update(encrypted, "base64", "utf8") + decipher.final("utf8");
  } catch {
    return Promise.resolve(false);
  }
  return Promise.resolve(decrypted === secret);
};
const randomSecret = () => randomUUID();

export { create, defaultEncryptAlgorithm, importEncryptSecret, randomSecret, verify };
