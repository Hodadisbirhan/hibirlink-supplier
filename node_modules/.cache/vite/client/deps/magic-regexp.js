import "./chunk-2E63JINA.js";

// node_modules/magic-regexp/dist/index.mjs
var NO_WRAP_RE = /^(\(.*\)|\\?.)$/;
var wrap = (s) => {
  const v = s.toString();
  return NO_WRAP_RE.test(v) ? v : `(?:${v})`;
};
var GROUPED_AS_REPLACE_RE = /^(?:\(\?:(.+)\)|(\(?.+\)?))$/;
var GROUPED_REPLACE_RE = /^(?:\(\?:(.+)\)([?+*]|{[\d,]+})?|(.+))$/;
var createInput = (s) => {
  const groupedAsFn = (key) => createInput(`(?<${key}>${`${s}`.replace(GROUPED_AS_REPLACE_RE, "$1$2")})`);
  return {
    toString: () => s.toString(),
    and: Object.assign((input) => createInput(`${s}${exactly(input)}`), {
      referenceTo: (groupName) => createInput(`${s}\\k<${groupName}>`)
    }),
    or: (input) => createInput(`(?:${s}|${exactly(input)})`),
    after: (input) => createInput(`(?<=${exactly(input)})${s}`),
    before: (input) => createInput(`${s}(?=${exactly(input)})`),
    notAfter: (input) => createInput(`(?<!${exactly(input)})${s}`),
    notBefore: (input) => createInput(`${s}(?!${exactly(input)})`),
    times: Object.assign((number) => createInput(`${wrap(s)}{${number}}`), {
      any: () => createInput(`${wrap(s)}*`),
      atLeast: (min) => createInput(`${wrap(s)}{${min},}`),
      atMost: (max) => createInput(`${wrap(s)}{0,${max}}`),
      between: (min, max) => createInput(`${wrap(s)}{${min},${max}}`)
    }),
    optionally: () => createInput(`${wrap(s)}?`),
    as: groupedAsFn,
    groupedAs: groupedAsFn,
    grouped: () => createInput(`${s}`.replace(GROUPED_REPLACE_RE, "($1$3)$2")),
    at: {
      lineStart: () => createInput(`^${s}`),
      lineEnd: () => createInput(`${s}$`)
    }
  };
};
var ESCAPE_REPLACE_RE = /[.*+?^${}()|[\]\\/]/g;
var charIn = (chars) => createInput(`[${chars.replace(/[-\\^\]]/g, "\\$&")}]`);
var charNotIn = (chars) => createInput(`[^${chars.replace(/[-\\^\]]/g, "\\$&")}]`);
var anyOf = (...args) => createInput(`(?:${args.map((a) => exactly(a)).join("|")})`);
var char = createInput(".");
var word = createInput("\\b\\w+\\b");
var wordChar = createInput("\\w");
var wordBoundary = createInput("\\b");
var digit = createInput("\\d");
var whitespace = createInput("\\s");
var letter = Object.assign(createInput("[a-zA-Z]"), {
  lowercase: createInput("[a-z]"),
  uppercase: createInput("[A-Z]")
});
var tab = createInput("\\t");
var linefeed = createInput("\\n");
var carriageReturn = createInput("\\r");
var not = {
  wordChar: createInput("\\W"),
  wordBoundary: createInput("\\B"),
  digit: createInput("\\D"),
  whitespace: createInput("\\S"),
  letter: Object.assign(createInput("[^a-zA-Z]"), {
    lowercase: createInput("[^a-z]"),
    uppercase: createInput("[^A-Z]")
  }),
  tab: createInput("[^\\t]"),
  linefeed: createInput("[^\\n]"),
  carriageReturn: createInput("[^\\r]")
};
var maybe = (str) => createInput(`${wrap(exactly(str))}?`);
var exactly = (input) => typeof input === "string" ? createInput(input.replace(ESCAPE_REPLACE_RE, "\\$&")) : input;
var oneOrMore = (str) => createInput(`${wrap(exactly(str))}+`);
var withIndices = "d";
var caseInsensitive = "i";
var global = "g";
var multiline = "m";
var dotAll = "s";
var unicode = "u";
var sticky = "y";
var createRegExp = (raw, flags) => new RegExp(exactly(raw).toString(), [...flags || ""].join(""));
export {
  anyOf,
  carriageReturn,
  caseInsensitive,
  char,
  charIn,
  charNotIn,
  createRegExp,
  digit,
  dotAll,
  exactly,
  global,
  letter,
  linefeed,
  maybe,
  multiline,
  not,
  oneOrMore,
  sticky,
  tab,
  unicode,
  whitespace,
  withIndices,
  word,
  wordBoundary,
  wordChar
};
//# sourceMappingURL=magic-regexp.js.map
