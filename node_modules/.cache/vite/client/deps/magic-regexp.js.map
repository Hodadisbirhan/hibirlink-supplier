{
  "version": 3,
  "sources": ["../../../../magic-regexp/dist/index.mjs"],
  "sourcesContent": ["const NO_WRAP_RE = /^(\\(.*\\)|\\\\?.)$/;\nconst wrap = (s) => {\n  const v = s.toString();\n  return NO_WRAP_RE.test(v) ? v : `(?:${v})`;\n};\n\nconst GROUPED_AS_REPLACE_RE = /^(?:\\(\\?:(.+)\\)|(\\(?.+\\)?))$/;\nconst GROUPED_REPLACE_RE = /^(?:\\(\\?:(.+)\\)([?+*]|{[\\d,]+})?|(.+))$/;\nconst createInput = (s) => {\n  const groupedAsFn = (key) => createInput(`(?<${key}>${`${s}`.replace(GROUPED_AS_REPLACE_RE, \"$1$2\")})`);\n  return {\n    toString: () => s.toString(),\n    and: Object.assign((input) => createInput(`${s}${exactly(input)}`), {\n      referenceTo: (groupName) => createInput(`${s}\\\\k<${groupName}>`)\n    }),\n    or: (input) => createInput(`(?:${s}|${exactly(input)})`),\n    after: (input) => createInput(`(?<=${exactly(input)})${s}`),\n    before: (input) => createInput(`${s}(?=${exactly(input)})`),\n    notAfter: (input) => createInput(`(?<!${exactly(input)})${s}`),\n    notBefore: (input) => createInput(`${s}(?!${exactly(input)})`),\n    times: Object.assign((number) => createInput(`${wrap(s)}{${number}}`), {\n      any: () => createInput(`${wrap(s)}*`),\n      atLeast: (min) => createInput(`${wrap(s)}{${min},}`),\n      atMost: (max) => createInput(`${wrap(s)}{0,${max}}`),\n      between: (min, max) => createInput(`${wrap(s)}{${min},${max}}`)\n    }),\n    optionally: () => createInput(`${wrap(s)}?`),\n    as: groupedAsFn,\n    groupedAs: groupedAsFn,\n    grouped: () => createInput(`${s}`.replace(GROUPED_REPLACE_RE, \"($1$3)$2\")),\n    at: {\n      lineStart: () => createInput(`^${s}`),\n      lineEnd: () => createInput(`${s}$`)\n    }\n  };\n};\n\nconst ESCAPE_REPLACE_RE = /[.*+?^${}()|[\\]\\\\/]/g;\nconst charIn = (chars) => createInput(`[${chars.replace(/[-\\\\^\\]]/g, \"\\\\$&\")}]`);\nconst charNotIn = (chars) => createInput(`[^${chars.replace(/[-\\\\^\\]]/g, \"\\\\$&\")}]`);\nconst anyOf = (...args) => createInput(`(?:${args.map((a) => exactly(a)).join(\"|\")})`);\nconst char = createInput(\".\");\nconst word = createInput(\"\\\\b\\\\w+\\\\b\");\nconst wordChar = createInput(\"\\\\w\");\nconst wordBoundary = createInput(\"\\\\b\");\nconst digit = createInput(\"\\\\d\");\nconst whitespace = createInput(\"\\\\s\");\nconst letter = Object.assign(createInput(\"[a-zA-Z]\"), {\n  lowercase: createInput(\"[a-z]\"),\n  uppercase: createInput(\"[A-Z]\")\n});\nconst tab = createInput(\"\\\\t\");\nconst linefeed = createInput(\"\\\\n\");\nconst carriageReturn = createInput(\"\\\\r\");\nconst not = {\n  wordChar: createInput(\"\\\\W\"),\n  wordBoundary: createInput(\"\\\\B\"),\n  digit: createInput(\"\\\\D\"),\n  whitespace: createInput(\"\\\\S\"),\n  letter: Object.assign(createInput(\"[^a-zA-Z]\"), {\n    lowercase: createInput(\"[^a-z]\"),\n    uppercase: createInput(\"[^A-Z]\")\n  }),\n  tab: createInput(\"[^\\\\t]\"),\n  linefeed: createInput(\"[^\\\\n]\"),\n  carriageReturn: createInput(\"[^\\\\r]\")\n};\nconst maybe = (str) => createInput(`${wrap(exactly(str))}?`);\nconst exactly = (input) => typeof input === \"string\" ? createInput(input.replace(ESCAPE_REPLACE_RE, \"\\\\$&\")) : input;\nconst oneOrMore = (str) => createInput(`${wrap(exactly(str))}+`);\n\nconst withIndices = \"d\";\nconst caseInsensitive = \"i\";\nconst global = \"g\";\nconst multiline = \"m\";\nconst dotAll = \"s\";\nconst unicode = \"u\";\nconst sticky = \"y\";\n\nconst createRegExp = (raw, flags) => new RegExp(exactly(raw).toString(), [...flags || \"\"].join(\"\"));\n\nexport { anyOf, carriageReturn, caseInsensitive, char, charIn, charNotIn, createRegExp, digit, dotAll, exactly, global, letter, linefeed, maybe, multiline, not, oneOrMore, sticky, tab, unicode, whitespace, withIndices, word, wordBoundary, wordChar };\n"],
  "mappings": "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",
  "names": []
}
