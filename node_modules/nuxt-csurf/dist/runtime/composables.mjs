import { useFetch, useNuxtApp } from "#app";
export function useCsrfFetch(request, arg1, arg2) {
  const [opts = {}, autoKey] = typeof arg1 === "string" ? [{}, arg1] : [arg1, arg2];
  const { csrf } = useCsrf();
  opts.headers = opts.headers || {};
  opts.headers["csrf-token"] = csrf;
  return useFetch(
    request,
    opts,
    // @ts-expect-error we pass an extra argument with the resolved auto-key to prevent another from being injected
    autoKey
  );
}
export function useLazyCsrfFetch(request, arg1, arg2) {
  const [opts, autoKey] = typeof arg1 === "string" ? [{}, arg1] : [arg1, arg2];
  return useCsrfFetch(
    request,
    {
      ...opts,
      lazy: true
    },
    // @ts-expect-error we pass an extra argument with the resolved auto-key to prevent another from being injected
    autoKey
  );
}
export function useCsrf() {
  if (process.server) {
    return { csrf: useNuxtApp().ssrContext?.event?.context?.csrfToken };
  }
  const metaTag = window.document.querySelector('meta[name="csrf-token"]');
  return { csrf: metaTag?.getAttribute("content") };
}
