import { h, defineComponent, ref, computed, onMounted } from "vue";
import { prerenderStaticImages } from "../utils/prerender.mjs";
import { useBaseImage, baseImageProps } from "./_base.mjs";
import { useImage, useHead } from "#imports";
import { getFileExtension } from "#image";
export const pictureProps = {
  ...baseImageProps,
  legacyFormat: { type: String, default: null },
  imgAttrs: { type: Object, default: null }
};
export default defineComponent({
  name: "NuxtPicture",
  props: pictureProps,
  emits: ["load"],
  setup: (props, ctx) => {
    const $img = useImage();
    const _base = useBaseImage(props);
    const isTransparent = computed(() => ["png", "webp", "gif"].includes(originalFormat.value));
    const originalFormat = computed(() => getFileExtension(props.src));
    const format = computed(() => props.format || originalFormat.value === "svg" ? "svg" : "webp");
    const legacyFormat = computed(() => {
      if (props.legacyFormat) {
        return props.legacyFormat;
      }
      const formats = {
        webp: isTransparent.value ? "png" : "jpeg",
        svg: "png"
      };
      return formats[format.value] || originalFormat.value;
    });
    const sources = computed(() => {
      if (format.value === "svg") {
        return [{ srcset: props.src }];
      }
      const formats = legacyFormat.value !== format.value ? [legacyFormat.value, format.value] : [format.value];
      return formats.map((format2) => {
        const { srcset, sizes, src } = $img.getSizes(props.src, {
          ..._base.options.value,
          sizes: props.sizes || $img.options.screens,
          modifiers: { ..._base.modifiers.value, format: format2 }
        });
        return { src, type: `image/${format2}`, sizes, srcset };
      });
    });
    if (props.preload) {
      const srcKey = sources.value?.[1] ? 1 : 0;
      const link = { rel: "preload", as: "image", imagesrcset: sources.value[srcKey].srcset };
      if (sources.value?.[srcKey]?.sizes) {
        link.imagesizes = sources.value[srcKey].sizes;
      }
      useHead({ link: [link] });
    }
    const imgAttrs = { ...props.imgAttrs, "data-nuxt-pic": "" };
    for (const key in ctx.attrs) {
      if (key in baseImageProps && !(key in imgAttrs)) {
        imgAttrs[key] = ctx.attrs[key];
      }
    }
    const imgEl = ref();
    if (process.server && process.env.prerender) {
      for (const src of sources.value) {
        prerenderStaticImages(src.src, src.srcset);
      }
    }
    onMounted(() => {
      imgEl.value.onload = (event) => {
        ctx.emit("load", event);
      };
    });
    return () => h("picture", { key: sources.value[0].src }, [
      ...sources.value?.[1] ? [h("source", {
        type: sources.value[1].type,
        sizes: sources.value[1].sizes,
        srcset: sources.value[1].srcset
      })] : [],
      h("img", {
        ref: imgEl,
        ..._base.attrs.value,
        ...imgAttrs,
        src: sources.value[0].src,
        sizes: sources.value[0].sizes,
        srcset: sources.value[0].srcset
      })
    ]);
  }
});
