{"version":3,"file":"colors-a13c945f.js","sources":["../helpers/helpers.ts","../../ui/dist/es/src/services/color/presets.js","../../ui/dist/es/src/services/breakpoint/index.js","../modules/breakpoint.ts","../modules/colors.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nexport const defaultTailwindConfigFilename = 'tailwind.config.cjs'\nexport const tailwindConfigFilename = fs.readdirSync('.').find((fileName: string) => fileName.startsWith('tailwind.config.'))\nexport const tailwindConfigPath = tailwindConfigFilename ? path.resolve(process.cwd(), tailwindConfigFilename) : undefined\n\n/**\n * @param value any value for converting it to raw string\n * @param nestingLevel current nesting level (is needed for correct indents)\n * @returns raw string value\n */\nexport const convertValueToString = (value: any, nestingLevel = 1): string => {\n  const result = []\n\n  if (typeof value === 'object' && !Array.isArray(value)) {\n    result.push('{\\n')\n\n    for (const prop in value) {\n      // if prop contains both numbers and literals and/or dashes we wrap it with quotes\n      const correctProp = /(?=.*\\d)(?=.*[a-z])|(?=.*-)/i.test(prop) ? `'${prop}'` : prop\n\n      result.push('\\t'.repeat(nestingLevel) + correctProp, ': ', convertValueToString(value[prop], nestingLevel + 1), ',\\n')\n    }\n\n    result.push('\\t'.repeat(nestingLevel - 1) + '}')\n  } else if (typeof value === 'object' && Array.isArray(value)) {\n    result.push('[\\n')\n\n    for (const prop in value) {\n      result.push(convertValueToString(value[prop], nestingLevel + 1), ',\\n')\n    }\n\n    result.push(']')\n  } else if (typeof value === 'number') {\n    result.push(value)\n  } else {\n    result.push(`'${value}'`)\n  }\n\n  return result.join('')\n}\n","const presets = {\n  light: {\n    // Accent\n    primary: \"#154EC1\",\n    secondary: \"#767C88\",\n    success: \"#3D9209\",\n    info: \"#158DE3\",\n    danger: \"#E42222\",\n    warning: \"#FFD43A\",\n    // Background Colors\n    backgroundPrimary: \"#f6f6f6\",\n    backgroundSecondary: \"#FFFFFF\",\n    backgroundElement: \"#ECF0F1\",\n    backgroundBorder: \"#DEE5F2\",\n    // Text Colors\n    textPrimary: \"#262824\",\n    textInverted: \"#FFFFFF\",\n    // Misc\n    shadow: \"rgba(0, 0, 0, 0.12)\",\n    focus: \"#49A8FF\",\n    transparent: \"rgba(0, 0, 0, 0)\"\n  },\n  dark: {\n    // Accent\n    primary: \"#3472F0\",\n    secondary: \"#767C88\",\n    success: \"#66BE33\",\n    info: \"#3EAAF8\",\n    danger: \"#F34030\",\n    warning: \"#FFD952\",\n    // Background Colors\n    backgroundPrimary: \"#050A10\",\n    backgroundSecondary: \"#1F262F\",\n    backgroundElement: \"#131A22\",\n    backgroundBorder: \"#3D4C58\",\n    // Text Colors\n    textPrimary: \"#F1F1F1\",\n    textInverted: \"#0B121A\",\n    // Misc\n    shadow: \"rgba(255, 255, 255, 0.12)\",\n    focus: \"#49A8FF\",\n    transparent: \"rgba(0, 0, 0, 0)\"\n  }\n};\nexport {\n  presets as p\n};\n//# sourceMappingURL=presets.js.map\n","const vaBreakpointSymbol = Symbol(\"vaBreakpoint\");\nconst defaultThresholds = {\n  xs: 0,\n  sm: 640,\n  md: 1024,\n  lg: 1440,\n  xl: 1920\n};\nconst getBreakpointDefaultConfig = () => ({\n  enabled: true,\n  bodyClass: true,\n  thresholds: defaultThresholds\n});\nexport {\n  defaultThresholds as d,\n  getBreakpointDefaultConfig as g,\n  vaBreakpointSymbol as v\n};\n//# sourceMappingURL=index.js.map\n","import { thresholdsPreset } from 'vuestic-ui'\n\ntype VuesticThresholdsList = Record<string, number>\ntype TailwindScreensConfig = Record<string, string>\n\n/**\n * @param thresholds tailwind css screens settings\n * @returns vuestic ui thresholds settings\n */\nconst convertTailwindThresholds = (thresholds: TailwindScreensConfig): VuesticThresholdsList => {\n  return Object.entries(thresholds)\n    .reduce((acc, [key, value]) => {\n      const vuesticThreshold = Number(value.substring(0, value.length - 2))\n\n      isNaN(vuesticThreshold) && console.warn(`${value} isn't correct Tailwind CSS screen!`)\n      if (!isNaN(vuesticThreshold)) {\n        acc[key] = vuesticThreshold\n      }\n\n      return acc\n    }, {} as VuesticThresholdsList)\n}\n\n/**\n * @param tailwindConfig users or default tailwind css config\n * @returns vuestic ui breakpoint config\n */\nexport const tailwindThresholdsSync = (tailwindConfig?: Record<string, any>): VuesticThresholdsList => {\n  let tailwindThresholds\n\n  if (tailwindConfig) {\n    const tailwindThresholdsConfig = tailwindConfig.theme?.screens || tailwindConfig.theme?.extend?.screens\n    if (tailwindThresholdsConfig) { tailwindThresholds = convertTailwindThresholds(tailwindThresholdsConfig) }\n  }\n\n  const isTailwindScreensConfigOverwritten = !!Object.keys(tailwindConfig?.theme?.screens || {}).length\n  const defaultTailwindConfig = require('tailwindcss/defaultTheme')\n  const tailwindDefaultScreensConverted = convertTailwindThresholds(defaultTailwindConfig.screens)\n\n  if (!tailwindThresholds) {\n    tailwindThresholds = tailwindDefaultScreensConverted\n  } else if (tailwindThresholds && !isTailwindScreensConfigOverwritten) {\n    tailwindThresholds = { ...tailwindDefaultScreensConverted, ...tailwindThresholds }\n  }\n\n  return tailwindThresholds\n}\n\n/**\n * @returns tailwind ui thresholds settings\n */\nexport const convertVuesticThresholds = (current: Record<string, any>): TailwindScreensConfig => {\n  const currentThresholdsConfig = { ...(current.theme.extend.screens || {}) }\n\n  if (!thresholdsPreset) {\n    console.warn(\"Vuestic UI default thresholds preset wasn't found!\")\n    return currentThresholdsConfig\n  }\n\n  const vuesticThresholdsConverted = Object.entries(thresholdsPreset)\n    .reduce((acc, [key, value]) => {\n      acc[key] = `${value}px`\n      return acc\n    }, {} as TailwindScreensConfig)\n\n  return { ...currentThresholdsConfig, ...vuesticThresholdsConverted }\n}\n","import { colorsPreset } from 'vuestic-ui'\n\ntype VuesticColorsList = Record<string, string>\ntype TailwindColorsConfig = Record<string, string | Record<string, string>>\n\n/**\n * @param colors tailwind css colors options\n * @returns vuestic ui colors options\n */\nconst convertTailwindColors = (colors: TailwindColorsConfig): VuesticColorsList => {\n  // system and deprecated by tailwind\n  const ignoredColors = ['inherit', 'current', 'transparent', 'coolGray', 'blueGray', 'trueGray', 'warmGray', 'lightBlue']\n  const result = {} as VuesticColorsList\n\n  for (const prop in colors) {\n    if (!ignoredColors.includes(prop)) {\n      const propValue = colors[prop]\n      if (typeof propValue === 'object') {\n        for (const nestedProp in (colors[prop] as Record<string, string>)) {\n          result[`${prop}-${nestedProp}`] = propValue[nestedProp]\n        }\n      } else {\n        result[prop] = <string>colors[prop]\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @param tailwindConfig users or default tailwind config\n * @returns vuestic colors config\n */\nexport const tailwindColorsSync = (tailwindConfig?: Record<string, any>): VuesticColorsList => {\n  let tailwindColors\n\n  if (tailwindConfig) {\n    const tailwindColorsConfig = tailwindConfig.theme?.colors || tailwindConfig.theme?.extend?.colors\n    if (tailwindColorsConfig) { tailwindColors = convertTailwindColors(tailwindColorsConfig) }\n  }\n\n  const isTailwindColorsConfigOverwritten = !!Object.keys(tailwindConfig?.theme?.colors || {}).length\n  const tailwindDefaultColors = require('tailwindcss/colors')\n  const tailwindDefaultColorsConverted = convertTailwindColors(tailwindDefaultColors)\n\n  if (!tailwindColors) {\n    tailwindColors = tailwindDefaultColorsConverted\n  } else if (tailwindColors && !isTailwindColorsConfigOverwritten) {\n    tailwindColors = { ...tailwindDefaultColorsConverted, ...tailwindColors }\n  }\n\n  return tailwindColors\n}\n\n/**\n * @param current current tailwind css config\n * @returns tailwind css colors options\n */\nexport const convertVuesticColors = (current: Record<string, any>): TailwindColorsConfig => {\n  const vuesticColorsPreset = colorsPreset?.light\n  const currentColorsConfig = { ...(current.theme.extend.colors || {}) }\n\n  if (!vuesticColorsPreset) {\n    console.warn(\"Vuestic UI default colors preset wasn't found!\")\n    return currentColorsConfig\n  }\n\n  return { ...currentColorsConfig, ...vuesticColorsPreset }\n}\n"],"names":["tailwindConfigFilename","fs","readdirSync","find","fileName","startsWith","tailwindConfigPath","path","resolve","process","cwd","convertValueToString","value","nestingLevel","result","Array","isArray","push","prop","correctProp","test","repeat","join","presets","light","primary","secondary","success","info","danger","warning","backgroundPrimary","backgroundSecondary","backgroundElement","backgroundBorder","textPrimary","textInverted","shadow","focus","transparent","dark","defaultThresholds","xs","sm","md","lg","xl","convertTailwindThresholds","thresholds","Object","entries","reduce","acc","key","vuesticThreshold","Number","substring","length","isNaN","console","warn","convertTailwindColors","colors","ignoredColors","includes","propValue","nestedProp","current","vuesticColorsPreset","colorsPreset","currentColorsConfig","theme","extend","currentThresholdsConfig","screens","thresholdsPreset","vuesticThresholdsConverted","tailwindConfig","tailwindColors","tailwindColorsConfig","_a","_c","_b","isTailwindColorsConfigOverwritten","keys","_d","tailwindDefaultColors","require","tailwindDefaultColorsConverted","tailwindThresholds","tailwindThresholdsConfig","isTailwindScreensConfigOverwritten","defaultTailwindConfig","tailwindDefaultScreensConverted"],"mappings":"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"}